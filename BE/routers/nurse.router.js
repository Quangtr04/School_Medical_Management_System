const express = require("express");
const { createSchedule } = require("../Controller/CheckUp/checkupController");

const {
  saveCheckupResult,
  updateCheckup,
  getCheckupParticipation,
  getCheckupParticipationById,
} = require("../Controller/CheckUp/saveCheckupResult");

const authenticateToken = require("../middlewares/authMiddlewares");

const Schemas = require("../Schemas/Schemas");
const {
  getCheckupListApproved,
  getCheckupList,
  getCheckupListDeclined,
  getCheckupById,
  getCheckupListPending,
} = require("../Controller/CheckUp/getCheckup");
const { getNotifications } = require("../Controller/Notification/getNotification");
const {
  createMedicalIncident,
  getAllIncidents,
  getIncidentById,
  getIncidentsByUserId,
  getIncidentByStudentId,
  updateIncident,
} = require("../Controller/Medical/medical_Incident");
const {
  getAllMedicalSupplies,
  getMedicalSupplyByID,
  updateMedicalSupply,
  medicalSupply,
} = require("../Controller/Medical/medicalSupply");
const {
  getVaccinationCampaign,
  getVaccinationCampaignById,
  getVaccinationCampaignPending,
  getVaccinationCampaignApprove,
  getVaccinationCampaignDeclined,
} = require("../Controller/Vaccine/getVaccineCampaign");
const { createVaccinationCampaign } = require("../Controller/Vaccine/VaccineController");
const {
  getStudentVaccineList,
  getStudentVaccineListById,
  updateResultVaccine,
  getStudentVaccineListByCampaignId,
} = require("../Controller/Vaccine/UpdateVaccineResult");
const { getAllStudentInfo, getStudentInfoById } = require("../Controller/Infomation/getInformation");
const { updateHealthDeclarationByStudentId } = require("../Controller/Health/healthDeclaration");
const { getProfileByUserId } = require("../Controller/Infomation/getUser");
const { parentUpdateUserById, nurseUpdateUserById } = require("../Controller/Login/account_status");
const {
  getAllMedicationSubmissionReq,
  getMedicationSubmissionReqByID,
  updateMedicationSubmissionReqByNurse,
} = require("../Controller/Medical/medicalSubmissionReq");
const {
  updateStatusMedicationDailyLog,
  getLogsByRequestIdAndUserId,
  getLogsByRequestIdAndUserIdAndStudentId,
} = require("../Controller/Medical/medicationDailyLog");

const { getLogByLogId, getLogsByDateAndNurse } = require("../Controller/Medical/medicationDailyLog");
const validateInput = require("../middlewares/validateInput");

const nurseRouter = express.Router();

// L·∫•y th√¥ng tin c√° nh√¢n
nurseRouter.get("/profile", authenticateToken, getProfileByUserId);

// C·∫≠p nh·∫≠t th√¥ng tin
nurseRouter.patch("/profile", authenticateToken, nurseUpdateUserById);

// üìå T·∫°o l·ªãch kh√°m s·ª©c kh·ªèe (nurse)
nurseRouter.post("/checkups/create", authenticateToken, createSchedule);

// üìå Xem danh s√°ch t·∫•t c·∫£ l·ªãch kh√°m
nurseRouter.get("/checkups", getCheckupList);

// üìå Xem chi ti·∫øt m·ªôt l·ªãch kh√°m theo ID
nurseRouter.get("/checkups/:id", getCheckupById);

// üìå L·∫•y danh s√°ch h·ªçc sinh ƒë√£ ƒë∆∞·ª£c duy·ªát (ƒë·ªÉ th·ª±c hi·ªán kh√°m)
nurseRouter.get("/checkups-approved/students/:checkup_id", getCheckupParticipation);

// L·∫•y danh h·ªçc sinh ƒë√£ ƒë∆∞·ª£c duy·ªát
nurseRouter.get("/checkups-approved/:id/students/:student_id", getCheckupParticipationById);

// üìå L∆∞u k·∫øt qu·∫£ kh√°m s·ª©c kh·ªèe cho h·ªçc sinh
// nurseRouter.post(
//   "/checkups/:checkup_id/students/:student_id/result",
//   validateInput(Schemas, "Checkup_Result"),
//   saveCheckupResult
// );

// üìå C·∫≠p nh·∫≠t ghi ch√∫ (note) cho h·ªçc sinh trong l·ªãch kh√°m
nurseRouter.patch("/checkups/students/:id/update", saveCheckupResult);

// L·∫•y l·ªãch kh√°m ƒë√£ ƒë∆∞·ª£c duy·ªát (ƒë·ªÉ th·ª±c hi·ªán kh√°m)
nurseRouter.get("/checkups-approved", getCheckupListApproved);

// L·∫•y l·ªãch kh√°m b·ªã t·ª´ ch·ªëi
nurseRouter.get("/checkups-declined", getCheckupListDeclined);

// L·∫•y l·ªãch kh√°m b·ªã ƒëang ch·ªù x√©t duy·ªát
nurseRouter.get("/checkups-pending", getCheckupListPending);

// Ghi nh·∫≠n y t·∫ø
nurseRouter.post(
  "/create-incident",
  authenticateToken,
  validateInput(Schemas, "MedicalIncidentSchema"),
  createMedicalIncident
);

// L·∫•y t·∫•t c·∫£ c√°c s·ª± c·ªë y t·∫ø
nurseRouter.get("/incidents", getAllIncidents);

// L·∫•y chi ti·∫øt s·ª± c·ªë y t·∫ø theo event_id
nurseRouter.get("/incidents/:event_id", getIncidentById);

// L·∫•y t·∫•t c·∫£ s·ª± c·ªë y t·∫ø li√™n quan ƒë·∫øn m·ªôt user
nurseRouter.get("/incidents/user", authenticateToken, getIncidentsByUserId);

// L·∫•y t·∫•t c·∫£ s·ª± c·ªë y t·∫ø li√™n quan ƒë·∫øn m·ªôt h·ªçc sinh
nurseRouter.get("/incidents/student/:student_id", getIncidentByStudentId);

// C·∫≠p nh·∫≠t s·ª± c·ªë y t·∫ø
nurseRouter.patch("/incidents/student/:event_id/update", authenticateToken, updateIncident);

// Th√™m v·∫≠t t∆∞ y t·∫ø
nurseRouter.post("/medical-supplies/create", validateInput(Schemas, "MedicalSupply"), medicalSupply);

// L·∫•y danh s√°ch v·∫≠t t∆∞ y t·∫ø
nurseRouter.get("/medical-supplies", getAllMedicalSupplies);

// L·∫•y danh s√°ch v·∫≠t t∆∞ y t·∫ø theo ID
nurseRouter.get("/medical-supplies/:supplyId", getMedicalSupplyByID);

// C·∫≠p nh·∫≠t v·∫≠t t∆∞ y t·∫ø theo ID
nurseRouter.patch("/medical-supplies/:supplyId/update", updateMedicalSupply);

// L·∫•y danh s√°ch l·ªãch ti√™m ch·ªßng
nurseRouter.get("/vaccine-campaigns", getVaccinationCampaign);

// L·∫•y chi ti·∫øt m·ªôt l·ªãch ti√™m ch·ªßng theo ID
nurseRouter.get("/vaccine-campaigns/:id", getVaccinationCampaignById);

// L·∫•y danh s√°ch l·ªãch ti√™m ch·ªßng ƒëang duy·ªát
nurseRouter.get("/vaccine-campaigns-pending", getVaccinationCampaignPending);

// L·∫•y danh s√°ch l·ªãch ti√™m ch·ªßng ƒë√£ b·ªã t·ª´ ch·ªëi
nurseRouter.get("/vaccine-campaigns-declined", getVaccinationCampaignDeclined);

// L·∫•y danh s√°ch l·ªãch ti√™m ch·ªßng ƒë√£ ch·∫•p thu·∫≠n
nurseRouter.get("/vaccine-campaigns-approved", getVaccinationCampaignApprove);

// T·∫°o l·ªãch ti√™m ch·ªßng
nurseRouter.post("/vaccine-campaigns/create", authenticateToken, createVaccinationCampaign);

// L·∫•y danh s√°ch h·ªçc sinh ƒë√£ duy·ªát theo id campaign
nurseRouter.get("/vaccine-campaigns-list-student/:campaign_id", getStudentVaccineListByCampaignId);

// L·∫•y th√¥ng tin chi ti·∫øt h·ªçc sinh ƒë∆∞·ª£c duy·ªát
nurseRouter.get("/vaccine-campaigns-students/:campaign_id/students/:vaccine_id", getStudentVaccineListById);

// C·∫≠p nh·∫≠t th√îng tin vaccine c·ªßa h·ªçc sinh
nurseRouter.patch("/vaccine-campaigns-students/students/:vaccine_id/update", updateResultVaccine);

// L·∫•y danh s√°ch s·ª©c kh·ªèe h·ªçc sinh
nurseRouter.get("/students/health-declaration", getAllStudentInfo);

// L·∫•y danh s√°ch s·ª©c kh·ªèe h·ªçc sinh theo id
nurseRouter.get("/students/health-declaration/:student_id", getStudentInfoById);

// C·∫≠p nh·∫≠t s·ª©c kh·ªèe h·ªçc sinh
nurseRouter.patch(
  "/students/:studentId/health-declaration",
  validateInput(Schemas, "HealthDeclaration"),
  updateHealthDeclarationByStudentId
);

// L·∫•y danh s√°ch ƒë∆°n thu·ªëc ƒë∆∞·ª£c g·ª≠i
nurseRouter.get("/medication-submissions", getAllMedicationSubmissionReq);

// L·∫•y danh s√°ch ƒë∆°n thu·ªëc ƒë∆∞·ª£c g·ª≠i theo id
nurseRouter.get("/medication-submissions/:ReqId", getMedicationSubmissionReqByID);

// C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n thu·ªëc ƒë∆∞·ª£c g·ª≠i
nurseRouter.patch("/medication-submissions/:ReqId/update", authenticateToken, updateMedicationSubmissionReqByNurse);

// C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n thu·ªëc m·ªói ng√†y
nurseRouter.patch(
  "/medication-daily-logs-submissions/:Logid/update",
  authenticateToken,
  updateStatusMedicationDailyLog
);

//l·∫•y th√¥ng b√°o
nurseRouter.get("/notifications", authenticateToken, getNotifications);

// L·∫•y nh·∫≠t k√Ω u·ªëng thu·ªëc theo ID y√™u c·∫ßu v√† ID y t√°
nurseRouter.get("/logs/by-request/:id_req", authenticateToken, getLogsByRequestIdAndUserId);

// L·∫•y nh·∫≠t k√Ω u·ªëng thu·ªëc theo ID y√™u c·∫ßu v√† ID y t√° v√† ID h·ªçc sinh
nurseRouter.get(
  "/logs/by-request/:id_req/student/:student_id",
  authenticateToken,
  getLogsByRequestIdAndUserIdAndStudentId
);

// L·∫•y nh·∫≠t k√Ω u·ªëng thu·ªëc theo ID nh·∫≠t k√Ω
nurseRouter.get("/logs/:log_id", authenticateToken, getLogByLogId);

// L·∫•y nh·∫≠t k√Ω u·ªëng thu·ªëc theo ng√†y v√† ID y t√°
nurseRouter.get("/logs/by-date", authenticateToken, getLogsByDateAndNurse);

module.exports = nurseRouter;
